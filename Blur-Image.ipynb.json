{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#David Lipkin\n",
    "#11/22/2019\n",
    "#This program was written as part of a project for PIC 16:\n",
    "#Python with Applications under professor Hangji Ji at UCLA\n",
    "\n",
    "def blur(im, method):\n",
    "    \"\"\"\n",
    "    blurring(im, method) takes a gray-scale picture and offers two\n",
    "    options for noise blurring: uniform or Gaussian.\n",
    "    \n",
    "    The uniform blur uses a uniform kernel of size k x k to determine\n",
    "    the value of each pixel in the output.\n",
    "    \n",
    "    The Gaussian blur uses a weighted kernel of size k x k, and\n",
    "    weight-intensity sigma, to determine the value of each pixel in \n",
    "    the output.\n",
    "    \"\"\"\n",
    "\n",
    "    import numpy as np\n",
    "    \n",
    "    n,m,d = im.shape\n",
    "    output = np.empty([n,m], dtype = 'float')\n",
    "    \n",
    "    if method == 'uniform':\n",
    "        \n",
    "        k = 7 #Determines the size of the filter\n",
    "        \n",
    "        for i in range(0 + k/2, n - k/2):\n",
    "            for j in range(0 + k/2, m - k/2):\n",
    "                #Sets each output pixel to the uniform sum of the k x k surrounding pixels\n",
    "                output[i,j] = np.sum(im[(i-k/2): (i+k/2)+1, (j-k/2): (j+k/2)+1])\n",
    "        #Normalizes the output\n",
    "        output /= k**2\n",
    "        #Converts the output to an n x m x 3 greyscale image\n",
    "        grey_output = np.dstack((output/3, output/3, output/3))\n",
    "        \n",
    "    if method == 'Gaussian':\n",
    "        \n",
    "        k = 25 #Determines the size of the filter\n",
    "        sigma = 2 #Determines the intensity of the weights for the Gaussian method\n",
    "        \n",
    "        #Creates a Gaussian filter based on k and sigma values above\n",
    "        filter = np.empty([k,k], dtype='float')\n",
    "        for x in range(k):\n",
    "            for y in range(k):\n",
    "                filter[x,y] = np.exp(-((x-(k-1)*0.5)**2+(y-(k-1)*0.5)**2)/(2.0*sigma**2))\n",
    "                filter_sum = np.sum(filter)\n",
    "                filter = filter/filter_sum\n",
    "    \n",
    "        for i in range(0 + k/2, n - k/2):\n",
    "            for j in range(0 + k/2, m - k/2):\n",
    "                #Sets weights of the k x k surrounding pixels\n",
    "                filtered_tiles = filter*(im[(i-k/2): (i+k/2)+1, (j-k/2): (j+k/2)+1, 0])\n",
    "                #Sets each output pixel to the weighted sum of the k x k surrounding pixels\n",
    "                output[i,j] = np.sum(filtered_tiles)\n",
    "        \n",
    "        #Converts the output to an n x m x 3 greyscale image\n",
    "        grey_output = np.dstack((output, output, output))\n",
    "        grey_output = grey_output[0 + k/2: n - k/2, 0 + k/2: m - k/2, :]\n",
    "        \n",
    "    return grey_output.astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib.image as mpimg"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Test-Code 1:\n",
    "#This cell prints a noisy image\n",
    "\n",
    "img = mpimg.imread(\"kitty-cat-bw.jpg\")\n",
    "plt.imshow(img)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Test-Code 2:\n",
    "#This cell prints the image above smoothed using the uniform blur method\n",
    "\n",
    "img_u = blur(img, 'uniform')\n",
    "print \"Uniform Blurred Image:\"\n",
    "plt.imshow(img_u)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Test-Code 3:\n",
    "#This cell prints the image above smoothed using the Gaussian blur method\n",
    "\n",
    "img_g = blur(img, 'Gaussian')\n",
    "print \"Gaussian Blurred Image:\"\n",
    "plt.imshow(img_g)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
